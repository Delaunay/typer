% -------------------------------------------
%       Let
% -------------------------------------------


let c = 1; a = 5; b = 10; d = 3; in
    a + b;
    

a = 1;
b = 2;
c = 3;
d = 4;

    
let a = 3; g = 1; e = 1; f = 3; in
    e + a + f + d;
    
    
% Not Implemented
% ----------------------


% Type definition
Nat = inductive_ (dummy_Nat) (zero) (succ Nat);

zero = inductive-cons Nat zero; 
succ = inductive-cons Nat succ;

v = (succ (succ zero));

% Recursive Let
let odd  = lambda n -> case n | (zero) => false | (succ y) => (even y);
    even = lambda n -> case n | (zero) => true  | (succ y) => (odd y); in
        (odd v)