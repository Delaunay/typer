% -------------------------------------------
%   Inductive type
% -------------------------------------------

% definition
inductive_ (dummy_Nat) (zero) (succ Nat);

% declaration 
% Nat : Type;                                         % This line is not parsed
Nat = inductive_ (dummy_Nat) (zero) (succ Nat);     % zero is not parsed

% only inductive-cons is available
inductive-cons Nat succ;

% Usage
zero = inductive-cons Nat zero; % those are aliases
succ = inductive-cons Nat succ;

one = (succ (zero));

% Case test
% x = (succ zero);
x = (succ (succ zero));

% Simple
case x
    | zero => 0
    | succ y => y
    | _ => (2 + 4);
    
% recursive
tonum = lambda x -> case x 
    | zero => 0
    | (succ y) => (1 + (tonum y));
    
(tonum x);
    
    
    