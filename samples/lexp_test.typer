

% -------------------------------------------
%   Function Calls
% -------------------------------------------

% define sqrt
sqrt x = lambda (x : Nat) -> x * x;

% define cube
cube = lambda (x : Nat) -> x * (sqrt x);

% explicit 
mult = lambda (x : Nat) -> lambda (y : Nat) -> (y * x);

% implicit (Type annotation introduce a bug)
cube = lambda x y -> (x * y);


% -------------------------------------------
%   Inductive type
% -------------------------------------------

inductive_ (dummy_Nat) (zero) (succ Nat);

% Usage
Nat : Type                                          % This line is not parsed
Nat = inductive_ (dummy_Nat) (zero) (succ Nat);     % zero is not parsed

%   Constructor
% -------------------------------------------

% only inductive-cons is available

inductive-cons Nat succ;

% Usage
zero = inductive-cons Nat zero; % those are aliases
succ = inductive-cons Nat succ;

one = (succ (zero));

% -------------------------------------------
%   Cases
% -------------------------------------------

case x
    | zero => y
    | succ x => succ (plus x y);
