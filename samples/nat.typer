Nat : Type;
Nat = inductive_ (dNat) (zero) (succ Nat);

zero = inductive-cons Nat zero;
succ = inductive-cons Nat succ;

to-num : Nat -> Int;
to-num = lambda (x : Nat) -> case x
  | (succ y) => (1 + (to-num y))
  | zero => 0;

plus : Nat -> Nat -> Nat;
plus = lambda (x : Nat) -> lambda (y : Nat) -> case x
  | zero => y
  | succ z => succ (plus z y);

one = succ zero;
two = succ one;
three = succ two;

even : Nat -> Int;
odd : Nat -> Int;
odd = lambda (n : Nat) -> case n
  | zero => 0
  | succ y => (even y);

even = lambda (n : Nat) -> case n
  | zero => 1
  | succ y => (odd y);


a = odd one;
b = even one;
c = odd two;
d = even two;