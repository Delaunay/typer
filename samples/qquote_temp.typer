

sqr = Macro_ (lambda (x : List Sexp) ->
    let hd = head Sexp x in
        (node_ (symbol_ "_*_") (cons hd (cons hd nil))));


symbol  = lambda (y : String)     -> (symbol_ y)  ;
string  = lambda (y : String)     -> (string_ y)  ;
integer = lambda (y : Int)        -> (integer_ y) ;
float   = lambda (y : Float)      -> (float_ y)   ;
block   = lambda (y : List Sexp)  -> (block_ y)   ;

qquote : List Sexp -> List Sexp;

node = (lambda (op : Sexp) ->
    lambda (y : List Sexp)  ->
        case y
            | nil => node_ op nil
            | _ => node_ op (qquote y));


qquote = lambda (x : List Sexp) ->
    let target = head Sexp x;
        tl = tail Sexp x;

        rhd = sexp_dispatch_ target
            node symbol string integer float block;

        rtl = case tl
            | nil => nil
            | _ => qquote tl;

        in
            cons rhd rtl;


nd = node_ (symbol_ "_+_") (cons (symbol_ "x") (cons (symbol_ "x") nil));
tst = cons nd nil;

% tst = (cons (symbol_ "x") (cons (symbol_ "x") nil));

main = qquote tst;

main = Macro_ lamda