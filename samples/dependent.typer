
Reify = typecons (Reify (a : Type))
  (RInt (Eq (t := Type) a Int))
  (RFloat (Eq (t := Type) a Float))
  (RString (Eq (t := Type) a String));

RInt = datacons Reify RInt;
RFloat = datacons Reify RFloat;
RString = datacons Reify RString;

float-to-int : Float -> Int;
float-to-int x = 1;

string-to-int : String -> Int;
string-to-int x = 1;

% Here
to-int : (a : Type) ≡> (r : (Reify a)) => (x : a) -> Int;
to-int = lambda a ≡>
  lambda r =>
    lambda x ->
      case r
        | RInt    p => Eq_cast (p := p) (f := (lambda x -> x)) x
        | RFloat  p => float-to-int (Eq_cast (p := p) (f := (lambda x -> x)) x)
        | RString p => string-to-int (Eq_cast (p := p) (f := (lambda x -> x)) x);

main = to-int 2.0;
main = to-int "2";
main = to-int 2;

a = cons 1 (cons 2 (cons 3 nil));
main = (case head a
  | some v => v
  | none   => 0);


