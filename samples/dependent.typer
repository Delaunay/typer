
Reify = typecons (Reify (a : Type))
  (RInt (Eq (t := Type) Int a))
  (RFloat (Eq (t := Type) Float a))
  (RString (Eq (t := Type) String a));

RInt = datacons Reify RInt;
RFloat = datacons Reify RFloat;
RString = datacons Reify RString;

float-to-int : Float -> Int;
float-to-int x = 1;

string-to-int : String -> Int;
string-to-int x = 1;

% Here
to-int : (a : Type) ≡> (r : (Reify a)) => (x : a) -> Int;
to-int = lambda a ≡>
  lambda r =>
    lambda x ->
      case r
        | RInt    _ => x
        | RFloat  _ => float-to-int x
        | RString _ => string-to-int x;

main = to-int 2.0;
main = to-int "2";
main = to-int 2;

a = cons 1 (cons 2 (cons 3 nil));
main = (case head a
  | some v => v
  | none   => 0);


