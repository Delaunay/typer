%% (_=_) = (l : TypeLevel) ≡> (t : Type@ l) ≡> t -> t -> Type;

Nat = inductive_ Type (zero : Nat) (succ : Nat -> Nat);

False = inductive_ Type;

Macro = inductive_ Type (MacroExp : Nat -> Macro);

%% Use for `cast'.
Equiv = inductive_ (t -> t -> Type) (refl: Equiv a a);

or = inductive_ (t -> t -> Type)
                (left: t1 -> or t1 t2)
                (right: t2 -> or t1 t2);

not = lambda x -> (x -> False);

classical-or = lambda x -> lambda y -> not (not (or x y));
