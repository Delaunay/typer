%*
%*      Typer Compiler
%*
%* ---------------------------------------------------------------------------
%*
%*      Copyright (C) 2011-2016  Free Software Foundation, Inc.
%*
%*   Author: Pierre Delaunay <pierre.delaunay@hec.ca>
%*   Keywords: languages, lisp, dependent types.
%*
%*   This file is part of Typer.
%*
%*   Typer is free software; you can redistribute it and/or modify it under the
%*   terms of the GNU General Public License as published by the Free Software
%*   Foundation, either version 3 of the License, or (at your option) any
%*   later version.
%*
%*   Typer is distributed in the hope that it will be useful, but WITHOUT ANY
%*   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%*   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
%*   more details.
%*
%*   You should have received a copy of the GNU General Public License along
%*   with this program.  If not, see <http://www.gnu.org/licenses/>.
%*
%* ---------------------------------------------------------------------------
%*
%*      Description:
%*          Define builtin types and functions
%*          This file MUST be correctly typed
%*
%* ---------------------------------------------------------------------------

% -----------------------------------------------------
%       Base Types
% -----------------------------------------------------

Unit    = inductive_ Unit unit;
unit    = inductive-cons Unit unit;

% Basic operators
_+_ = Built-in "_+_" (Int -> Int -> Int);
_*_ = Built-in "_*_" (Int -> Int -> Int);

Bool = inductive_ (Boolean) (True) (False);
True = inductive-cons Bool True;
False = inductive-cons Bool False;

%Option : Type -> Type;
Option = inductive_ (Option (a : Type)) (None) (Some a);
Some = inductive-cons Option Some;
None = inductive-cons Option None;

string_eq = Built-in "string_eq" (String -> String -> Bool);
int_eq    = Built-in    "int_eq" (Int -> Int -> Bool);
sexp_eq   = Built-in   "sexp_eq" (Sexp -> Sexp -> Bool);

% -----------------------------------------------------
%       List
% -----------------------------------------------------

List : Type -> Type;
List = inductive_ (List (a : Type)) (nil) (cons a (List a));

nil = inductive-cons List nil;
cons = inductive-cons List cons;

length : (a : Type) ≡> List a -> Int;
length = lambda a ≡>
  lambda xs ->
    case xs
      | nil => 0
      | cons hd tl => (1 + (length tl));

% ML's typical `head` function is not total, so can't be defined
% as-is in Typer.  There are several workarounds:
% - Provide a default value : (a : Type) ≡> List a -> a -> a;
% - Disallow problem case   : (a : Type) ≡> (l : List a) -> (l != nil) -> a;
% - Return an Option/Error.
head : (a : Type) ≡> List a -> Option a;
head = lambda a ≡>
  lambda xs ->
    case xs
      | nil => None
      | cons hd tl => Some hd;

tail : (a : Type) ≡> List a -> List a;
tail = lambda a ≡>
  lambda xs ->
    case xs
      | nil => nil
      | cons hd tl => tl;


% -----------------------------------------------------
%       Macro
% -----------------------------------------------------

block_   = Built-in "block_"   (List Sexp -> Sexp);
symbol_  = Built-in "symbol_"  (String    -> Sexp);
string_  = Built-in "string_"  (String    -> Sexp);
node_    = Built-in "node_"    (Sexp -> List Sexp -> Sexp);
integer_ = Built-in "integer_" (Int       -> Sexp);
float_   = Built-in "float_"   (Float     -> Sexp);

Macro  = inductive_ (Macro)
  (Macro_ (List Sexp -> Sexp))
  (DMacro_ (List Sexp -> List Sexp));

Macro_ = inductive-cons Macro Macro_ ;
DMacro_ = inductive-cons Macro DMacro_ ;

expand_macro_ : Macro -> List Sexp -> Sexp;
expand_macro_ m args = case m
  | Macro_ f => (f args)
  % return first sexp if a DMacro_ is used
  | DMacro_ f => (case (f args)
    | cons hd tl => hd
    | nil => (symbol_ "error"));

expand_dmacro_ : Macro -> List Sexp -> List Sexp;
expand_dmacro_ m args = case m
  | DMacro_ f => (f args)
  % Wrap a Macro in a list of Sexp if Macro_ is used
  | Macro_ f => cons (a := Sexp) (f args) (nil (a := Sexp));

sexp_dispatch_ = Built-in "sexp_dispatch_" (
                              (a : Type) ≡>
                              Sexp
                              -> (Sexp -> List Sexp -> a)
                              -> (String -> a)
                              -> (String -> a)
                              -> (Int -> a)
                              -> (Float -> a)
                              -> (List Sexp -> a)
                              -> a
                          );

% -----------------------------------------------------
%       Monads
% -----------------------------------------------------

% Builtin bind
bind = Built-in "bind" (
  (a : Type) ≡>
  (b : Type) ≡>
    IO a -> (a -> IO b) -> (IO b));

% return = Built-in "return" ((a : Type) ≡> a -> IO a);

% File monad

%% `runIO` should have type IO Unit -> b -> b
%% or IO a -> b -> b, which means "run the IO, throw away the result,
%% and then return the second argument unchanged".  The "dummy" b argument
%% is actually crucial to make sure the result of runIO is used, otherwise
%% the whole call would look like a dead function call and could be
%% optimized away!
run-io = Built-in "run-io" ((a : Type) ≡> IO Unit -> a -> a);

% Define operations on file handle.
open  = Built-in "open"  (String -> String -> IO FileHandle);
write = Built-in "write" (FileHandle -> String -> IO Unit);
read  = Built-in "read"  (FileHandle -> Int -> IO String);
