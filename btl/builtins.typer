%*
%*      Typer Compiler
%*
%* ---------------------------------------------------------------------------
%*
%*      Copyright (C) 2011-2016  Free Software Foundation, Inc.
%*
%*   Author: Pierre Delaunay <pierre.delaunay@hec.ca>
%*   Keywords: languages, lisp, dependent types.
%*
%*   This file is part of Typer.
%*
%*   Typer is free software; you can redistribute it and/or modify it under the
%*   terms of the GNU General Public License as published by the Free Software
%*   Foundation, either version 3 of the License, or (at your option) any
%*   later version.
%*
%*   Typer is distributed in the hope that it will be useful, but WITHOUT ANY
%*   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%*   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
%*   more details.
%*
%*   You should have received a copy of the GNU General Public License along
%*   with this program.  If not, see <http://www.gnu.org/licenses/>.
%*
%* ---------------------------------------------------------------------------
%*
%*      Description:
%*          Define builtin types and functions
%*          This file MUST be correctly typed
%*
%* ---------------------------------------------------------------------------

% -----------------------------------------------------
%       Base Types
% -----------------------------------------------------

% The trivial type which carries no information.
Unit    = typecons Unit unit;
unit    = datacons Unit unit;

% The empty type, with no constructors: nothing can have this type.
Void = typecons Void;

% Eq : (l : TypeLevel) ≡> (t : Type_ l) ≡> t -> t -> Type_ l
% Eq' : (l : TypeLevel) ≡> Type_ l -> Type_ l -> Type_ l
Eq_refl = Built-in "Eq.refl"
                   ((l : TypeLevel) ≡> (t : Type_ l) ≡> (x : t)
                    ≡> Eq (t := t) x x);

Eq_cast = Built-in "Eq.cast"
                   ((l1 : TypeLevel) ≡> (t : Type_ l1) ≡> (x : t) ≡> (y : t)
                    ≡> (p : Eq (t := t) x y)
                    ≡> (l2 : TypeLevel) ≡> (f : t -> Type_ l2)
                    ≡> f x -> f y);

%% Commutativity of equality!
Eq_comm : (l : TypeLevel) ≡> (t : Type_ l) ≡> (x : t) ≡> (y : t)
          ≡> (p : Eq (t := t) x y) -> Eq (t := t) y x;
Eq_comm = lambda l t x y ≡> lambda p ->
          Eq_cast (f := lambda xy -> Eq (t := t) xy x)
                  (p := p)
                  Eq_refl;

%% General recursion!!
%% Whether this breaks onsistency or not is a good question.
%% The basic idea is the following:
%%
%%   The `witness` argument presumably makes sure that "Y f" can only
%%   create new recursive values for types which were already inhabited.
%%   So there's no `f` such that `Y f : False`.
%%
%% But this is not sufficient, because you could use `Y` to create
%% new recursive *types* which then let you construct new arbitrary
%% recursive values of previously uninhabited types.
%% E.g. you could create Y <something> = ((... → t) -> t) -> t
%% and then give the term "λx. x x" inhabiting that type, and from that
%% get a proof of False.
%%
%% So we have a secondary restriction: This `Y` is a builtin primitive/axiom
%% with no reduction rule, so that Y <something> is never convertible
%% to something like ((... → t) -> t) -> t
%%
%% Of course, we do have a "natural" evaluation rule for it, so after type
%% checking we can run our recursive functions just fine, but those
%% recursive functions won't be unfolded during type checking.
%%
%% FIXME: Really, this Y should be used internally/transparently for any
%% function which has not been termination-checked successfully (or at all).
Y = Built-in "Y" ((a : Type) ≡> (b : Type) ≡> (witness : a -> b) ≡>
                  ((a -> b) -> (a -> b)) -> (a -> b));

% Basic operators
_+_ = Built-in "Int.+" (Int -> Int -> Int);
_-_ = Built-in "Int.-" (Int -> Int -> Int);
_*_ = Built-in "Int.*" (Int -> Int -> Int);
_/_ = Built-in "Int./" (Int -> Int -> Int);

Bool = typecons (Boolean) (true) (false);
true = datacons Bool true;
false = datacons Bool false;

string_eq = Built-in "string_eq" (String -> String -> Bool);
int_eq    = Built-in    "int_eq" (Int -> Int -> Bool);
sexp_eq   = Built-in   "sexp_eq" (Sexp -> Sexp -> Bool);

% -----------------------------------------------------
%       List
% -----------------------------------------------------

List : Type -> Type;
List = typecons (List (a : Type)) (nil) (cons a (List a));

nil = datacons List nil;
cons = datacons List cons;

% -----------------------------------------------------
%       Macro
% -----------------------------------------------------

block_   = Built-in "block_"   (List Sexp -> Sexp);
symbol_  = Built-in "symbol_"  (String    -> Sexp);
string_  = Built-in "string_"  (String    -> Sexp);
node_    = Built-in "node_"    (Sexp -> List Sexp -> Sexp);
integer_ = Built-in "integer_" (Int       -> Sexp);
float_   = Built-in "float_"   (Float     -> Sexp);

Macro  = typecons (Macro)
  (Macro_ (List Sexp -> Sexp));

Macro_ = datacons Macro Macro_ ;


expand_macro_ : Macro -> List Sexp -> Sexp;
expand_macro_ m args = case m
  | Macro_ f => (f args);

sexp_dispatch_ = Built-in "sexp_dispatch_" (
                         (a : Type) ≡>
                         Sexp
                         -> (node   : Sexp -> List Sexp -> a)
                         -> (symbol : String -> a)
                         -> (string : String -> a)
                         -> (int    : Int -> a)
                         -> (float  : Float -> a)
                         -> (block  : List Sexp -> a)
                         -> a
                     );


% -----------------------------------------------------
%       Monads
% -----------------------------------------------------

% Builtin bind
bind = Built-in "bind" (
  (a : Type) ≡>
  (b : Type) ≡>
    IO a -> (a -> IO b) -> (IO b));

% return = Built-in "return" ((a : Type) ≡> a -> IO a);

% File monad

%% `runIO` should have type IO Unit -> b -> b
%% or IO a -> b -> b, which means "run the IO, throw away the result,
%% and then return the second argument unchanged".  The "dummy" b argument
%% is actually crucial to make sure the result of runIO is used, otherwise
%% the whole call would look like a dead function call and could be
%% optimized away!
run-io = Built-in "run-io" ((a : Type) ≡> IO Unit -> a -> a);

% Define operations on file handle.
open  = Built-in "open"  (String -> String -> IO FileHandle);
write = Built-in "write" (FileHandle -> String -> IO Unit);
read  = Built-in "read"  (FileHandle -> Int -> IO String);

% -----------------------------------------------------
% Logic
% -----------------------------------------------------

% False should be one of the many empty types.
% Other common choices are False = ∀a.a and True = ∃a.a.
False = Void;
True = Unit;

Not : Type -> Type;
Not prop = prop -> False;

% Like Bool, except that it additionally carries the meaning of its value.
Decidable = typecons (Decidable (prop : Type))
                     (true (p ::: prop)) (false (p ::: Not prop));


% -----------------------------------------------------
% To be removed (used it tests)
% -----------------------------------------------------

Option = typecons (Option (a : Type)) (none) (some a);
some = datacons Option some;
none = datacons Option none;

length : (a : Type) ≡> List a -> Int;
length = lambda a ≡>
  lambda xs ->
    case xs
      | nil => 0
      | cons hd tl => (1 + (length tl));

% ML's typical `head` function is not total, so can't be defined
% as-is in Typer.  There are several workarounds:
% - Provide a default value : (a : Type) ≡> List a -> a -> a;
% - Disallow problem case   : (a : Type) ≡> (l : List a) -> (l != nil) -> a;
% - Return an Option/Error.
head : (a : Type) ≡> List a -> Option a;
head = lambda a ≡>
  lambda xs ->
    case xs
      | nil => none
      | cons hd tl => some hd;

tail : (a : Type) ≡> List a -> List a;
tail = lambda a ≡>
  lambda xs ->
    case xs
      | nil => nil
      | cons hd tl => tl;
