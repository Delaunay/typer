\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename typer.info
@settitle The Typer Language
@c %**end of header
@copying
.

Copyright @copyright{} 2012-2016  Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

@end quotation

The document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@titlepage
@title The Typer Language
@subtitle 
@author Stefan Monnier @c @code{<monnier@iro.umontreal.ca>}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top The Typer Language

@insertcopying
@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Syntax::
* Index::
@end menu

@c Update all node entries with `C-c C-u C-n'.
@c Insert new nodes with `C-c C-c n'.
@node Syntax
@chapter Syntax

The syntax of Typer is divided into several layers.

@menu
* Lexing::
* Sexp parsing::
* Parsing code::
@end menu

@node Lexing
@section Lexing

The source text is a byte-sequence, although it is usually assumed to
be written in @code{utf-8} for purposes of counting error positions.

This sequence of bytes is divided into @emph{tokens}.  This process
recognizes strings, identifiers, numbers, comments, whitespace, and
matched braces.  Identifiers are generally defined as any sequence of
non-special characters and hence need to be separated by spaces.

Special characters are: @code{%}, @code{"}, @code{@{}, @code{@}},
whitespace characters, plus a configurable list of extra special
characters, which by default is comprised of @code{,}, @code{;},
@code{(}, and @code{)}.

@itemize
@item
Comments start with a @code{%} (byte 37) and end with a @code{LF}
(byte 10).
@item
Strings start and end with a @code{"} (byte 34) and use @code{\} (byte
92) for escape sequences.
@item
Whitespace is defined as any sequence of bytes smaller than @code{SPC}
(bytes <= 32).
@item
Integers are composed of any non-empty sequence of decimal digits
(bytes between 48 and 57 included).
@item
Floating point numbers: FIXME
@end itemize

@node Sexp parsing
@section Parsing Sexp

After lexing, the Sexp parsing code turns the sequence of tokens
into a kind of syntax tree according to an @emph{operator precedence
grammar}.

Macros receive their arguments in this Sexp form.

@node Parsing code
@section Parsing code

When an Sexp is to be treated as a chunk of code, it gets parsed
into a Pexp.

@node Core Syntax
@section Core Syntax

The core syntax of the language is as follows:

@example
arw   ::= '≡>' | '=>' | '->'
colon ::= ':::' | '::' | ':'
exp   ::= id
        | '(' id ':' exp ')' arw exp
        | 'let' decls 'in' exp
        | exp actual_arg
        | exp ':' exp
        | 'lambda' simple_arg arw exp
        | 'case' exp ('|' pattern '=>' exp)*
        | 'inductive_' '(' label formal_arg* ')' ('(' label ind_arg* ')')*
        | 'inductive-cons' id label
pattern ::= id pat_arg*
decls ::= ε | decl ';' decls
decl  ::= id ':' exp
        | id '=' exp
simple_arg  ::= id  | '(' id ':' exp ')'
formal_arg  ::= id  | '(' id colon exp ')'
ind_arg     ::= exp | '(' id colon exp ')'
pat_arg     ::= id  | '(' id ':=' id ' )'
actual_arg  ::= exp | '(' id ':=' exp ')'
label       ::= id
@end example

The three different kinds of arrows and colons are
used respectively for @emph{erasable} arguments, @emph{implicit}
arguments, and @emph{explicit} arguments.  @emph{explicit} arguments
are the normal kind of arguments we're all familiar with.
@emph{implicit} arguments are like Haskell's type class dictionaries:
you do not need to provide them explicitly, they are provided
automatically by inference (or by some macro).  @emph{erasable}
arguments are like the type arguments of Haskell and ML: they are not
only implicit but they can additionally be thrown away after
type checking.

The basic language additionally accepts the following syntactic sugar:

@example
exp   ::= ... | exp arw exp
        | exp actual_arg+
        | 'lambda' simple_arg+ arw exp
decl  ::= ... | inductive id formal_arg* ('|' id ind_arg*)
        | id formal_arg* '=' exp
@end example

@code{exp1 arw exp2} is a non-dependent function type, like the ones
used in traditional functional programming.  @code{'(' id ':' exp1 ')'
arw exp2} is the dependent function type.  @code{exp1 arw exp2} is just
syntactic sugar for @code{'(' id ':' exp1 ')' arw exp2} where @code{id}
is a fresh new identifier which does not occur within @code{exp2}.

Note: while it would be desirable to allow @code{lambda x : type ->
exp} instead of @code{lambda (x : type) -> exp}, this can't work,
because that would imply parsing @code{exp : type1 -> type2} as
@code{(exp : type1) -> type2} rather than as @code{exp : (type1 ->
type2)}.

@c @node Copying This Manual
@c @appendix Copying This Manual

@c @menu
@c * GNU Free Documentation License::  License for copying this manual.
@c @end menu

@c @c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
@c @include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

@c typer.texi ends here
